[project]
name = "pitstopmanager"
version = "0.1.0"
description = "Sistema de gestão para oficinas mecânicas"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "django>=5.2",
    "pillow>=11.2.1",
    "django-crispy-forms>=2.0",
    "crispy-bootstrap5>=0.7",
    "django-filter>=23.0",
    "django-import-export>=3.3.0",
    "celery>=5.3.0",
    "redis>=4.6.0",
    "django-extensions>=3.2.0",
    "django-widget-tweaks>=1.5.0",
]

[project.optional-dependencies]
dev = [
    "django-silk>=5.0.0",
    "factory-boy>=3.3.0",
    "pytest>=8.3.5",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pre-commit>=4.2.0",
    "taskipy>=1.14.1",
]
prod = [
    "gunicorn>=21.2.0",
    "sentry-sdk>=1.32.0",
    "django-storages>=1.14.0",
    "boto3>=1.28.0",
    "django-cors-headers>=4.3.0",
]


[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_glob = ["**/migrations/*.py"]

[tool.flake8]
max-line-length = 88
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
    "migrations",
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings.testing"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = [
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
testpaths = ["tests", "apps"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["apps"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "manage.py",
    "*/settings/*",
    "*/wsgi.py",
    "*/asgi.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.taskipy.tasks]
# Development tasks
run = "uv run manage.py runserver"
shell = "uv run manage.py shell"
check = "uv run manage.py check"


# Database tasks
makemigrations = "uv run manage.py makemigrations"
migrate = "uv run manage.py migrate"
showmigrations = "uv run manage.py showmigrations"
dbshell = "uv run manage.py dbshell"

# Static files
collectstatic = "uv run manage.py collectstatic --noinput"

# User management
createsuperuser = "uv run manage.py createsuperuser"

# Development tools
# test = "uv run pytest"
# coverage = "uv run pytest --cov=apps --cov-report=html"
format = "uv run black apps config && uv run isort apps config"
lint = "uv run flake8 apps config"
pre-commit-install = "uv run pre-commit install"

# New app creation
startapp = "uv run manage.py startapp"

# Production tasks
# prod-collect = "uv run --group prod manage.py collectstatic --noinput"
# prod-migrate = "uv run --group prod manage.py migrate"

[tool.setuptools.packages.find]
include = ["apps*", "config*"]
